#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\branch Introduction
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{secnumdepth}{4}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Logo_Politecnico_Milano.png
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Standard
\align center
Software Engineering 2 project:
\begin_inset Formula $\mathit{PowerEnJoy}$
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing other 0
\align center
A.A.
 2016/2017 - Professor E.
 di Nitto
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{20pt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing single
\align center

\series bold
\size huge
Design Document
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{50pt}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Version 
\series bold
1.0 
\begin_inset Formula $\mathrm{-}11/12/2016$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
smallskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pietro Avolio
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mat 878640
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Guido Borrelli
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mat 874451
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
The purpose of this Design Document is to provide a more detailed description
 of the PowerEnJoy system architecture, to describe main architectural component
s, their interfaces and interactions.
 Two sections are also dedicated to algorithms and user interfaces.
\end_layout

\begin_layout Standard
This document is thus intended for project manages, developers and testers
 and it can be considered as a good overview to base the development and
 the maintenance on.
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
As stated in the RASD document, the PowerEnJoy system is made of three main
 components: two very thin clients (PowerEnJoy Mobile Application and PowerEnJoy
 Control Room) and one application server (PowerEnJoy Core).
\end_layout

\begin_layout Standard
In this document, we will describe how this components create a four layers
 architecture, how they interact and communicate one with each other.
 We will also provide a physical deployment structure.
\end_layout

\begin_layout Standard
For the sake of coherence and consistency, we will provide a strong cross-refere
nce to the RASD document, of which this Design Document is a natural follow-up
 and deepening.
\end_layout

\begin_layout Subsection
Definitions, acronyms and abbreviations
\end_layout

\begin_layout Standard
In order to avoid ambiguity and possible misunderstandings, this table is
 an integration to the definitions, the acronyms and the abbreviations defined
 in the RASD document.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Relational Data
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data structured according to the relational model
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NoSQL Data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Data not structured according to the relational model
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RDBMS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Relational Database Management Server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NSDBMS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NoSQL Database Management Server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java EE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java Enterprise Edition
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EJB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Enterprise JavaBeans
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JPA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java Persistence API
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Reference Documents
\end_layout

\begin_layout Itemize
Design Document of previous year published on Beep.
\end_layout

\begin_layout Itemize
Software Design & Software Architecture slides on Beep
\end_layout

\begin_layout Itemize
Architectural Styles on Beep
\end_layout

\begin_layout Itemize
Software Architectures in Action on Beep
\end_layout

\begin_layout Itemize
Java EE 7 Overview on Beep
\end_layout

\begin_layout Itemize
Tips and Trick for Supporting Architecture Description with UML on Beep
\end_layout

\begin_layout Subsection
Document Structure
\end_layout

\begin_layout Standard
The document is structured in the following chapters:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\boldsymbol{Introduction}$
\end_inset

 This chapter provides general information about this document, it's purpose
 and the intended public.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\boldsymbol{Architectural\,Design}$
\end_inset

 This chapter provides details about the components of the system, their
 interactions and interfaces.
 The dynamic behaviour is provided as well as a focus on design, styles
 and pattern choices.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\boldsymbol{Algorithm\,Design}$
\end_inset

 This chapter provides and discusses about the most interesting algorithms
 to be implemented in the system.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\boldsymbol{User\,Interfaces\,Design}$
\end_inset

 This chapter provides some elements mockups for the user interfaces to
 be developed.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\boldsymbol{Requirements\,Traceability}$
\end_inset

 This chapter shows how all the functional requirements stated in the RASD
 document are statisfied by architectural choices.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Standard
This section provides a very detailed view over the system architecture
 and its components, describing them at both the logical and physical level.
\end_layout

\begin_layout Standard
Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:High-level-components"

\end_inset

 describes high-level components of the system; each of this components
 will be separately described and detailed in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Component-view"

\end_inset

; section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Deployment-view"

\end_inset

 focuses on the deployment of the system on physical tiers; section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Runtime-view"

\end_inset

 describes the dynamic behaviour of the softwares; section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Component-interfaces"

\end_inset

 focuses on the interface between different components; finally section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Selected-architectural-styles"

\end_inset

 provides a description of the design choices and patterns.
\end_layout

\begin_layout Subsection
High level components and their interaction
\begin_inset CommandInset label
LatexCommand label
name "subsec:High-level-components"

\end_inset


\end_layout

\begin_layout Standard
As stated in the RASD document, the system is composed of three main softwares:
 two very thin clients, which are PowerEnJoy Mobile Application and PowerEnJoy
 Control Room, and a server containing all the application logic, which
 is PowerEnJoy Core.
 Plus, also company vehicles can be considered as passive clients, since
 they complete some tasks automatically without human interactions.
\end_layout

\begin_layout Standard
The architectural style chosen for the system is a classical client-server
 architecture, splitted on four logical layers as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Logical-layer"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Layers - Page 1.png
	display false
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Logical layers 
\begin_inset CommandInset label
LatexCommand label
name "fig:Logical-layer"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The system also needs to interface with some external components in order
 to accomplish some tasks.
 This components are:
\end_layout

\begin_layout Itemize
Payment Gateway
\end_layout

\begin_layout Itemize
SMS Gateway
\end_layout

\begin_layout Itemize
Support Ticket System
\end_layout

\begin_layout Standard
A diagram including an high level overview of the system components is shown
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:High-level-components"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/High level view component - Page 1.png
	display false
	scale 29

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
High level components overview 
\begin_inset CommandInset label
LatexCommand label
name "fig:High-level-components"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Component view
\begin_inset CommandInset label
LatexCommand label
name "subsec:Component-view"

\end_inset


\end_layout

\begin_layout Subsubsection
Relational Database
\end_layout

\begin_layout Standard
The relational database is in charge of storing all the data that well fit
 the relational model.
 It runs on a MySQL Community Edition as DBMS and it uses InnoDB as database
 engine for all the tables.
 ACID properties must be guaranteed over all the transactions.
 
\end_layout

\begin_layout Standard
The relational database communicates with the business logic tier only:
 communication goes using the TCP/IP protocol on an arbitrary network port.
 
\end_layout

\begin_layout Standard
The database must be physically protected and duplicated in order to avoid
 data loss.
 Communication must be encrypted and different users should be created and
 assigned to the different softwares that access the database in order to
 always guarantee the minimum required level of privileges per software.
\end_layout

\begin_layout Subsubsection
NoSQL Database
\end_layout

\begin_layout Standard
The NoSQL database is in charge of storing all the data generated by the
 system such as logs and all the kinds of data that will not require any
 update or delete durint the time and that will be accessed to be consulted
 only.
 The decision of using a NoSQL database instead of a traditional relational
 database is driven by the need of velocity in inserting and accessing a
 big amount of data.
 For this reason, it's not required to ensure all the ACID properties over
 transactions.
 
\end_layout

\begin_layout Standard
The NoSQL database runs on MongoDB as DBMS and communicates with the business
 logic tier using the TCP/IP protocol on an arbitrary port.
 
\end_layout

\begin_layout Standard
All the security concerns stated for the relational database apply to the
 NoSQL database as well.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Database diagram - Page 1.png
	display false
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Entity-relational diagram for both the relational and the NoSQL databases
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Application Server
\end_layout

\begin_layout Standard
The application server is where the PowerEnJoy Core is executed and where
 all the business logic is.
 It is implemented using Java EE and it runs on a GlassFish Server.
 
\end_layout

\begin_layout Standard
The business logic is implemented using custom EJBs; the access to the database
 is implemented using the JPA for both the relational and the NoSQL databases.
\end_layout

\begin_layout Standard
In order to expose its functionalities, the PowerEnJoy Core provides RESTful
 APIs as interface to the clients and to the web server.
 The detailed behaviour of these interfaces is described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Application-server-to-clients"

\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The following list contains all the beans composing the Core application,
 while a component diagram is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Component-diagram-core"

\end_inset

.
\end_layout

\begin_layout Standard
All the beans uses the Log Manager and the REST API Manager, thus there
 are no shown connections to this beans in the diagram for the sake of readabili
ty.
 All the beans inside the same container can interact one with each other.
\end_layout

\begin_layout Subsubsection*
User Manager
\end_layout

\begin_layout Standard
This bean manages all the features related to users: registration, login,
 account details update.
 Furthermore, this bean provides the token used to identify the client once
 the user logges-in.
 It validates driving license information and it generates and sends the
 user's password during the registration process.
 This bean also handles requests to show available vehicles in a certain
 area.
\end_layout

\begin_layout Subsubsection*
Operators Manager
\end_layout

\begin_layout Standard
This bean manages all the features related to operators.
 It mainly communicates with the web-server which hosts the Control Room
 component and with the Support Requests Handler.
\end_layout

\begin_layout Subsubsection*
Vehicle Manager
\end_layout

\begin_layout Standard
This bean manages all the features and the operations related to vehicles.
 When the application is started, a stateful bean is instanciated for each
 company vehicle and it is destroyed only when the application is destroyed.
 This bean also implements the 
\begin_inset Formula $\mathit{hearthbeat}$
\end_inset

 function: it periodically communicates with the vehicle in order to get
 its information and keep the internal status updated.
 The update interval is of 30 seconds for rented vehicle, 2 minutes for
 all the others.
 It also offers an interface to change the status of the vehicle and it
 is responsable for sending commands.
 This bean handles the events sent by vehicles (e.g.
 when the engine is turned on/off).
\end_layout

\begin_layout Subsubsection*
Reservations Handler
\end_layout

\begin_layout Standard
This bean manages all the aspects relative to reservations: insert, update,
 delete and expiry.
 When a reservation is requested over a vehicle it is handled directly by
 this bean.
 When a reservation expires, this bean communicates with the Pricing Polciies
 Manager and with the Payment Handler in order to charge the user.
\end_layout

\begin_layout Subsubsection*
Rentals Handler
\end_layout

\begin_layout Standard
Exactly like the Reservations Handler, this bean manages the insertion,
 the update, the deletion and the expiry of users rentals.
 It is responsible for handling the user's request to unlock the doors of
 a vehicle.
\end_layout

\begin_layout Subsubsection*
Pricing Policies Manager
\end_layout

\begin_layout Standard
This bean calculates the final cost of a rental eligible by the company
 after gathering all the details about the rental.
 In this beans all the pricing policies stated by the company are applied.
\end_layout

\begin_layout Subsubsection*
Payment Handler
\end_layout

\begin_layout Standard
This bean handles all the payment requests generated by the other beans
 and it interfaces with the external payment gateway.
 It also validates payment information when provided by the user during
 the registration process or when they are updated.
\end_layout

\begin_layout Subsubsection*
Log Manager
\end_layout

\begin_layout Standard
This bean satisfies the need of keeping track of everything by registering
 each system or user action.
 It is used by almost all the other beans of the system.
\end_layout

\begin_layout Subsubsection*
CronTasks Manager
\end_layout

\begin_layout Standard
This bean manages all the tasks that must be executed periodically, such
 as to retrieve the users to notify when their documents are about to expire
 and it generates internal support request needed to be handled by operators.
\end_layout

\begin_layout Subsubsection*
Support Requests Handler
\end_layout

\begin_layout Standard
This bean is in charge of the insert, update, and delete of support requests
 forwared by customers.
 These request are later handled personally by the company operators.
\end_layout

\begin_layout Subsubsection*
Email Sender
\end_layout

\begin_layout Standard
This bean allows the system to send emails to a specific user or to a group
 of users.
\end_layout

\begin_layout Subsubsection*
Push Notifications Sender
\end_layout

\begin_layout Standard
This bean allows the system to send push notifications to a specific ouser
 r to a group of users.
 It provides an interface to the Push Notifications Gateway.
\end_layout

\begin_layout Subsubsection*
SMS Sender
\end_layout

\begin_layout Standard
This bean allows the system to send SMS to the users on their mobile phone
 number.
 It provides an interface to the SMS Gateway.
\end_layout

\begin_layout Subsubsection*
REST API Manager
\end_layout

\begin_layout Standard
This bean is responsible for all the REST APIs provided by the system.
 It is used by almost all the other beans.
 It validates incoming requests and builds responses, in order to have a
 centralized place in which to define a standard for communication.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/2.3) Components of the Core  - Page 1.png
	lyxscale 14
	display false
	scale 18

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Component diagram of Power Enjoy Core.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:Component-diagram-core"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Web server
\end_layout

\begin_layout Standard
The web server is implemented using Java EE specific HTTP servlet and HTML5,
 for this reason it runs on a GlassFish Server.
 The dynamic part of the user interface is realized using jQuery.
 
\end_layout

\begin_layout Standard
This component does not implement any part of the business logic, but it
 communicates with the application server by using its RESTfil APIs.
 It can be accessed by operators using a standard web browser and the HTTPs
 protocol.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The web server architecture, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Architecture-web-server"

\end_inset

, is very simple and composed of JavaServer Faces for the view and by a
 controller which translates user actions into REST requests to the application
 server.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Web Server architecture - Page 1.png
	display false
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Architecture of the web server
\begin_inset CommandInset label
LatexCommand label
name "fig:Architecture-web-server"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Clients
\end_layout

\begin_layout Subsubsection*
PowerEnJoy Vehicles
\end_layout

\begin_layout Standard
As stated in the RASD document and in the previous sections of this document,
 we manage PowerEnJoy vehicles as clients.
 Both the hardware and the software solutions used to implement the information
 system installed on the vehicles is not part of this project.
\end_layout

\begin_layout Standard
The communication with vehicles is implemented using messages and queries:
 the PowerEnJoy core can query a specific vehicle in order to get information
 (e.g.
 position, number of passengers, mechanical status) and send commands (e.g.
 to unlock doors); vehicles can send messages to the PowerEnJoy core as
 reaction to some events (i.e.
 when the rental starts and when the rental ends).
\end_layout

\begin_layout Subsubsection*
PowerEnJoy Mobile Application
\end_layout

\begin_layout Standard
As stated in the RASD document, this mobile application represents the main
 interface for customers and it should be implemented for both the Android
 and the iOS platforms.
\end_layout

\begin_layout Standard
The main purpose of the mobile application is to retrieve information from
 the PowerEnJoy core, to transmit user actions and show their results.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The Android application is implemented using Java and all the native components
 offered by the Android SDK.
\end_layout

\begin_layout Standard
The iOS application is implemented using Swing and the UIKit for the interface.
 A solution involving multi-platform development (e.g.
 Xamarin) can also be taken into account, even if a native implementation
 still remains the most encouraged solution in order to offer the best possibile
 experience to customers.
 A solution involving WebViews is considered an applicable solution for
 matters of reliability.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The mobile application directly communicates with the business logic using
 its RESTful API interfaces.
\end_layout

\begin_layout Subsubsection*
PowerEnJoy Control Room
\end_layout

\begin_layout Standard
As stated in the RASD document, the PowerEnJoy control room is a web-application
 and it represents the main interface to the system for the company operators.
 It is implemented using HTML5 and jQuery and it relies on the web server
 tier.
\end_layout

\begin_layout Subsubsection
External components
\end_layout

\begin_layout Subsubsection*
SMS gateway
\end_layout

\begin_layout Standard
This component is used in order to notify users using SMS on their mobile
 phone numbers.
 It's not directly implemented by the system but it's used as-a-service
 from Trendoo
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.trendoo.it
\end_layout

\end_inset

.
 Details on the communication between the system and the gateway is provided
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Application-server-to-external-components"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Payment gateway
\end_layout

\begin_layout Standard
This component is used in order to process users' payments.
 It's not directly implemented by the system but it's used as-a-service
 from GestPay provided by Banca Sella
\begin_inset Foot
status open

\begin_layout Plain Layout
https://www.gestpay.it/gestpay/index.jsp
\end_layout

\end_inset

.
 Details on the communication between the system and the gateway is provided
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Application-server-to-external-components"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Push Notifications gateway
\end_layout

\begin_layout Standard
This component is used in order to send push notifications to the users
 on their mobile phones.
 It's not directly implemented by the system but it's used as-a-service
 from Google Firebase
\begin_inset Foot
status open

\begin_layout Plain Layout
https://firebase.google.com/
\end_layout

\end_inset

.
 Details on the communication between the system and the gateway is provided
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Application-server-to-external-components"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Deployment view
\begin_inset CommandInset label
LatexCommand label
name "subsec:Deployment-view"

\end_inset


\end_layout

\begin_layout Standard
The physical deployment of the system is done on 3 layers, as shown in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Deployment-diagram"

\end_inset


\end_layout

\begin_layout Itemize
Clients are deployed on different devices according to their finalities.
\end_layout

\begin_layout Itemize
The application server and the web server can be deployed on the same physical
 machine because the web server serves the ControlRoom web-application only.
\end_layout

\begin_layout Itemize
The relational and the NoSQL databases can be deployed on the same physical
 machine.
 However, since they are completely indipendent one from the other, they
 could be moved on different machines as soon as it will be required for
 some reason.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Deplyment diagram - Page 1.png
	display false
	scale 22

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Deployment diagram
\begin_inset CommandInset label
LatexCommand label
name "fig:Deployment-diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Runtime view
\begin_inset CommandInset label
LatexCommand label
name "subsec:Runtime-view"

\end_inset


\end_layout

\begin_layout Standard
In this section we will expand some scenarios from the RASD document with
 the purpose of clarifying the dinamic behaviour of the system.
 Entities of database are represented using the Java Persistence API entities.
\end_layout

\begin_layout Standard
For the sake of simplicity, the log manager bean is shown in every sequence
 because it is intended to register every action The Rest API Manager bean
 is put between transactions that require it.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Sequence Diagram - Registration - Page 1.png
	display false
	scale 28

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Account registration - Sequence diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Sequence Diagram - Auto searching & Reservation - Page 1.png
	display false
	scale 25

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Vehicle research and reservation - Sequence diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Sequence Diagram - Rental Start - Page 1.png
	display false
	scale 22.5

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Rental beginning process - Sequence diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Sequence Diagram - Rent finished - Page 1.png
	display false
	scale 35
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Rental finished - Sequence diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Component interfaces
\begin_inset CommandInset label
LatexCommand label
name "subsec:Component-interfaces"

\end_inset


\end_layout

\begin_layout Subsubsection
Application server to database
\end_layout

\begin_layout Standard
The communication beetwen the application server and the two databases goes
 using standard TCP/IP protocol on two different network ports.
 Both the relational and the NoSQL databases are abstracted in the application
 core by using the Java Persistence APIs, which use the correct SQL dialect
 in order to interact with the MySql Community Edition DBMS and the MongoDB
 DBMS.
 
\end_layout

\begin_layout Standard
Since the two databases can not directly communicate one with the other,
 if a query requires information from the databases the merge should be
 done at an application level by merging two different queries results.
\end_layout

\begin_layout Subsubsection
Application server to clients (REST APIs)
\begin_inset CommandInset label
LatexCommand label
name "subsec:Application-server-to-clients"

\end_inset

 
\end_layout

\begin_layout Standard
The clients and the application core communicate by using REST APIs over
 the HTTPS protocol.
 Requests are forwarded using the POST parameters, while responses are encoded
 in the JSON format.
 
\end_layout

\begin_layout Standard
In the following pages, we list the detailed rest APIs implemented by the
 beans.
 Parameters marked with an 
\begin_inset Formula $\mathit{O}$
\end_inset

 are optional.
\end_layout

\begin_layout Subsubsection*
User Manager
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{login}$
\end_inset

 This interface point allows registered user to log in using username and
 password.
 If the credentials are correct, the response contains an authentication_token
 to be sent as paramtere in further communications.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{registration}$
\end_inset

 This interface point allows a customer to register and create an account.
 If the registration process is succesful, an authentication_token is returned
 and an email containing a password is sent to the user.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{documents}$
\end_inset

 This interface point allows a logged-in user to associate its document
 to the account.
 This interface is used both during the registration and when the user updates
 its account information.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{payment}$
\end_inset

 This interface point allows a logged-in user to associate its payment informati
on to the account.
 This interface is used both during the registation and when the user updates
 its payment method.
 The provided information are validated, as stated in the RASD document,
 by applying a fee of 0,01 EURO.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{get\,vehicles}$
\end_inset

 This interface point allows a logged-in user to retrieve available vehicles
 in a certain area.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="15line%">
<column alignment="left" valignment="top" width="35line%">
<column alignment="left" valignment="top" width="50line%">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Service}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Input}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Output}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
login
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
user_email
\end_layout

\begin_layout Itemize
user_password
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Login result code
\end_layout

\begin_layout Itemize
[O] authentication_token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
registration
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
full_name
\end_layout

\begin_layout Itemize
username
\end_layout

\begin_layout Itemize
email_address
\end_layout

\begin_layout Itemize
home_address
\end_layout

\begin_layout Itemize
phone_number
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Registration result code
\end_layout

\begin_layout Itemize
[O] authentication_token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
documents
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
authentication_token
\end_layout

\begin_layout Itemize
identity_card
\end_layout

\begin_layout Itemize
id_expiration
\end_layout

\begin_layout Itemize
driving_license
\end_layout

\begin_layout Itemize
dl_expiration
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Operation result code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
payment
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
authentication_token
\end_layout

\begin_layout Itemize
credit_card_number
\end_layout

\begin_layout Itemize
credit_card_expiry
\end_layout

\begin_layout Itemize
credit_card_cvv
\end_layout

\begin_layout Itemize
credit_card_owner
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Operation result code
\end_layout

\end_inset
</cell>
</row>
<row newpage="true">
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
get_vehicles
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
authentication_token
\end_layout

\begin_layout Itemize
position_lat
\end_layout

\begin_layout Itemize
position_long
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A list of available vehicles in a certain range from the given position,
 together with their positions and details.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Operators Manager
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{login}$
\end_inset

 This interface point allows operators to log-in using their id and password.
 If the authentication is succesful an operator_authentication_code is returned
 to be used in furhter communcations.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{support\,requests}$
\end_inset

 This interface point allows operators to retrieve support requests forwarded
 by users or automatically generated by the system requiring an operator
 action.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{handle\,request}$
\end_inset

 This interface point allows operators to handle a support request by sending
 a message or changing the request status.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{get\,user\,info}$
\end_inset

 This interface point allows operators to get all the information about
 a specific user such as account information and activity log.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{edit\,user}$
\end_inset

 This interface point allows operators to manipulate or disable an user
 account.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{charge\,driving\,loan}$
\end_inset

 This interface point allows operators to charge an user for a loan he took
 during a rental.
 Operators just need to provide driving loan details and the system automaticall
y detects which user was driving the car at the moment of the infraction.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{get\,vehicles}$
\end_inset

 This interface point allows operators to retrieve all the vehicles in a
 specific area.
 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features islongtable="true" longtabularalignment="left">
<column alignment="left" valignment="top" width="15col%">
<column alignment="left" valignment="top" width="35col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Service}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Input}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Output}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
login
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
operator_id
\end_layout

\begin_layout Itemize
operator_password
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Login result code
\end_layout

\begin_layout Itemize
[O]: op_authentication_token
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
support_requests
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
op_auth_token
\end_layout

\begin_layout Itemize
[O] order_by
\end_layout

\begin_layout Itemize
[O] from_date
\end_layout

\begin_layout Itemize
[O] to_date
\end_layout

\begin_layout Itemize
[O] by_user
\end_layout

\begin_layout Itemize
[O] status
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A list of support requests
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
handle_request
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
op_auth_token
\end_layout

\begin_layout Itemize
request_id
\end_layout

\begin_layout Itemize
[O] new_status
\end_layout

\begin_layout Itemize
[O] text_answer
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Operation result code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
get_user_info
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
op_auth_token
\end_layout

\begin_layout Itemize
[O] user_email
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Informations about the user
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
edit_user
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
op_auth_token
\end_layout

\begin_layout Itemize
[O] account_status
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Operation result code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
charge_driving_
\begin_inset Newline newline
\end_inset

loan
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
op_auth_token
\end_layout

\begin_layout Itemize
amount
\end_layout

\begin_layout Itemize
driving_loan_details
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Operation result code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
get_vehicles
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
op_auth_token
\end_layout

\begin_layout Itemize
position_lat
\end_layout

\begin_layout Itemize
position_lon
\end_layout

\begin_layout Itemize
range
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A list of all the vehicles in the given range from the given position, together
 with their position and details
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Support Requests Handler
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{send\,request}$
\end_inset

 This interface point allows a logged-in user to forward a support request
 or to forward a system notification.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{send\,message}$
\end_inset

 This interface point allows a logged-in user to reply to a still open support
 request.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="left" valignment="top" width="15col%">
<column alignment="left" valignment="top" width="35col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Service}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Input}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Output}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
send_request
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
authentication_token
\end_layout

\begin_layout Itemize
request_details
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Operation result code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
send_message
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
authentication_token
\end_layout

\begin_layout Itemize
request_id
\end_layout

\begin_layout Itemize
message_text
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Operation result code
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Reservations Handler
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{reserve}$
\end_inset

 This interface point allows a logged-in user to reserve a vehicle.
 If the operation is succesful, a reservation code is returned.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{cancel reservation}$
\end_inset

 This interface point allows a logged-in user to cancel an active reservation.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{show reservation}$
\end_inset

 This interface point allows a logged-in user to get an active reservation,
 if any.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="left" valignment="top" width="15col%">
<column alignment="left" valignment="top" width="35col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Service}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Input}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Output}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserve
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
authentication_token
\end_layout

\begin_layout Itemize
vehicle_id
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Operation result code
\end_layout

\begin_layout Itemize
[O] Reservation code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
cancel_reservation
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
authentication_token
\end_layout

\begin_layout Itemize
vehicle_id
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Operation result code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
show_reservation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
authentication_token
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
[O] User's active reservation
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Rentals Handler
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{unlock doors}$
\end_inset

 This interface point allows a logged-in user with an active reservation
 over a vehicle to unlock the doors of the vehicle.
 The operation is succesful only if the user nearby (< 100 mt) the vehicle.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="left" valignment="top" width="15col%">
<column alignment="left" valignment="top" width="35col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Service}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Input}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Output}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unlock_doors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
authentication_token
\end_layout

\begin_layout Itemize
vehicle_id
\end_layout

\begin_layout Itemize
user_position_lat
\end_layout

\begin_layout Itemize
user_position_lon
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Operation result code
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Vehicle Manager
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Formula $\mathit{event}$
\end_inset

 This interface point is used by vehicles to send a status update.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="left" valignment="top" width="15col%">
<column alignment="left" valignment="top" width="35col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Service}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Input}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Output}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
event
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
vehicle_token
\end_layout

\begin_layout Itemize
event_type [ENGINE_ON | ENGINE_OFF]
\end_layout

\begin_layout Itemize
status
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Operation result code
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Application server to vehicles
\end_layout

\begin_layout Standard
As stated in the RASD and in this document, we assume that the information
 system installed onboard of company vehicles as given and not part of this
 project.
 
\end_layout

\begin_layout Standard
For the way we structured the whole architecture, we just require that the
 vehicles expose an unique interface point, using the RESTful approach encoded
 using the JSON format:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="left" valignment="top" width="15col%">
<column alignment="left" valignment="top" width="35col%">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Service}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Input}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\boldsymbol{Output}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
status
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{-16pt}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
battery_level
\end_layout

\begin_layout Itemize
battery_charging
\end_layout

\begin_layout Itemize
location_lat
\end_layout

\begin_layout Itemize
location_lon
\end_layout

\begin_layout Itemize
passenger
\end_layout

\begin_layout Itemize
speed
\end_layout

\begin_layout Itemize
mechanical_status
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Web server to clients
\end_layout

\begin_layout Standard
The web server interfaces with browsers only: the communication goes using
 the standard HTTPS protocol.
\end_layout

\begin_layout Subsubsection
Application server to external components
\begin_inset CommandInset label
LatexCommand label
name "subsec:Application-server-to-external-components"

\end_inset


\end_layout

\begin_layout Subsubsection*
Application server to SMS Gateway
\end_layout

\begin_layout Standard
Trendoo SMS Gateway provides a wide range of communication protocols.
 The most suitable for our purposes is HTTPS.
\end_layout

\begin_layout Subsubsection*
Application server to Payment Gateway
\end_layout

\begin_layout Standard
GestPay by BancaSella Payment Gateway provides a complete SDK.
 Communication works using HTTPS.
\end_layout

\begin_layout Subsubsection*
Application server to Push Notifications Gateway
\end_layout

\begin_layout Standard
Firebise provides a complete SDK.
 Communcation works using HTTPS.
\end_layout

\begin_layout Subsection
Selected architectural styles and patterns
\begin_inset CommandInset label
LatexCommand label
name "subsec:Selected-architectural-styles"

\end_inset


\end_layout

\begin_layout Standard
The main architectural style for the system is the client-server one, splitted
 on four logical layers and three physical layers.
\end_layout

\begin_layout Standard
The main design pattern to adopt is the well known MVC, suggested for every
 object oriented project.
 In this way we can easily separate the model, which main purpose is to
 manage the data, from the view, which is the presentation layer, and from
 the controller, which main purpose is to manage the other two components.
\end_layout

\begin_layout Subsubsection
Passwords and other sensible data
\end_layout

\begin_layout Standard
The system collects users' passwords and other kind of sensible data (e.g.
 mobile phone number, email address, home address) and a series of logs
 about the vehicles that could be used to track the users.
 For this reason, the database must be protected both physically and logically
 in order to avoid any kind of data loss.
\end_layout

\begin_layout Standard
Passwords should be salted and encrypted using the most advanced algorithms.
\end_layout

\begin_layout Subsubsection
Maps
\end_layout

\begin_layout Standard
The system massively uses maps as an immediate way to visualize the vehicles.
 Also geocoding and distances calculation are used in all the components
 of the system.
 
\begin_inset Formula $\mathit{GoogleMaps}$
\end_inset

 is the most suitable external service to satisfy all the these needs on
 both the client and the server side.
\end_layout

\begin_layout Subsubsection
Communication with vehicles
\end_layout

\begin_layout Standard
To communicate with the vehicles is a key requirement of the system, mainly
 for what concers security.
 In order to avoid that malicious users can take control over the vehicles
 - and maybe unlock them - the on board information system should accept
 commands from the PowerEnJoy Core only.
 This can be achieved by using TLS certificates and encrypted communications.
\end_layout

\begin_layout Subsubsection
Reliability and availability
\end_layout

\begin_layout Standard
As stated in the RASD document (sections 3.2.1 and 3.2.2), reliability and availabil
ity are core requirements for the system.
 In order to achieve them, a combination of redundancy and parallelization
 appears as the most suitable solution.
 The deployment architectur we described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Deployment-view"

\end_inset

 is engineered in order to easily support scalability and parallelism.
\end_layout

\begin_layout Section
Algorithm Design
\end_layout

\begin_layout Standard
In this section we want to provide an outline of the main and the more interesti
ng algorithm used by the system.
 Algorithms are detailed using java-like pseudocode and textual descriptions
 because of the reasonable tradeoff between expressivity and simplicity.
 They will represent high-idea procedures in order to not give any restrictions
 for future coding implementations.
 
\end_layout

\begin_layout Subsection
New reservation
\end_layout

\begin_layout Standard
This algorithm represents the procedure issued when the user wants to make
 a new reservation over a vehicle.
 This algorithm is part of the Reservations Handler bean.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,breaklines=true"
inline false
status open

\begin_layout Plain Layout

Reservation newReservation(Vehicle v, User u){
\end_layout

\begin_layout Plain Layout

	/* We first check that the vehicle is available and that the user can make
 a reservation*/
\end_layout

\begin_layout Plain Layout

	if(v.getStatus() == STATUS_AVAILABLE && u.isEnable() && this.getReservation(u)
 == NULL && RentalsManager.getRental(u) == NULL){
\end_layout

\begin_layout Plain Layout

		/* We create a reservation object containing the vehicle, the user, the
 start time and the expiration time */
\end_layout

\begin_layout Plain Layout

		Reservation r = new Reservation(v, u, System.currentTime(), System.currentTime()
+RESERVATIONS_EXPIRY_TIME);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* We change the status of the vehicle using the VehicleManager */
\end_layout

\begin_layout Plain Layout

		VehicleManager.getForVehicle(v).changeStatus(STATUS_RESERVED);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* We store the reservation in the database using the JavaPersistenceApi*/
\end_layout

\begin_layout Plain Layout

		JPA.storeReservation(r);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* We schedule a task to handle the expiry of the reservation */
\end_layout

\begin_layout Plain Layout

		new Handler().executePostDelayed(this.reservationExpiry(r), RESERVATIONS_EXPIRY_
TIME);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* We add something in the log related to user's activity */
\end_layout

\begin_layout Plain Layout

		LogManager.log(LOG_USER_ACTIVITY, u, "Reserved " + v);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* We return the newly created reservation */
\end_layout

\begin_layout Plain Layout

		return r;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	}else{
\end_layout

\begin_layout Plain Layout

		/* If the reservation can not be created we simply return NULL */
\end_layout

\begin_layout Plain Layout

		return NULL;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Unlock Doors
\end_layout

\begin_layout Standard
This algorithm represents the procedure issued when the user with an active
 reservation over a vehicle wants to unlock the doors of the vehicle.
 This algorithm is part of the Rentals Handler bean.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

boolean unlockDoors(Vehicle v, User u, Coordinates userPosition){
\end_layout

\begin_layout Plain Layout

	/* We first check if the user has an active reservation over the vehicle,
 then we check if he is nearby */
\end_layout

\begin_layout Plain Layout

	if(v.getStatus == STATUS_RESERVED && this.getReservation(u).getVehicle().equals(v)
 
\end_layout

\begin_layout Plain Layout

		&& Math.euclideanDistance(userPosition, VehicleManager.getForVehicle(v).getPositi
on()) < MAX_DISTANCE_FROM_VEHICLE_TO_UNLOCK){
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		/* We use the vehicle manager to send the command to the vehicle */
\end_layout

\begin_layout Plain Layout

		VehicleManager.getForVehicle(v).unlockDoors();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* We log the activity */
\end_layout

\begin_layout Plain Layout

		LogManager.log(LOG_VEHICLE_ACTIVITY, "Doors unlocked by" + u);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		return TRUE;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	return FALSE;	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Rental ended
\end_layout

\begin_layout Standard
This algorithm is applied in the Rentals Handler when a rental is ended.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

boolean rentalEnded(Rental r){
\end_layout

\begin_layout Plain Layout

	Vehicle v = r.getVehicle();
\end_layout

\begin_layout Plain Layout

	User u = u.getUser();
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	/* The rental can be terminated only inside a safe area */
\end_layout

\begin_layout Plain Layout

	if(v.isInSafeArea()){
\end_layout

\begin_layout Plain Layout

		/* We calculate the fee and we charge the user */
\end_layout

\begin_layout Plain Layout

		double rentalFee = PricingPolicyManager.calculateFee(r);
\end_layout

\begin_layout Plain Layout

		PaymentHandler.chargeUser(u, rentalFee);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* We update the rental object and the database */
\end_layout

\begin_layout Plain Layout

		r.setEndend(System.currentTime());
\end_layout

\begin_layout Plain Layout

		JPA.updateRental(r);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		/* Based on the battery level, we change the status of the vehicle */
\end_layout

\begin_layout Plain Layout

		VehicleManager vehicleManager = VehicleManager.getForVehicle(v);
\end_layout

\begin_layout Plain Layout

		if(v.getBatteryLevel() > 20){
\end_layout

\begin_layout Plain Layout

			vehicleManager.changeStatus(STATUS_AVAILABLE);
\end_layout

\begin_layout Plain Layout

		}else{
\end_layout

\begin_layout Plain Layout

			vehicleManager.changeStatus(STATUS_UNAVAILABLE);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		/* We log the operation */
\end_layout

\begin_layout Plain Layout

		LogManager.log(r + "terminated");
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		return TRUE;
\end_layout

\begin_layout Plain Layout

	}else{
\end_layout

\begin_layout Plain Layout

		/* We notify the user via sms too */
\end_layout

\begin_layout Plain Layout

		SmsSender.send(u, OUTSIDE_SAFE_AREA);
\end_layout

\begin_layout Plain Layout

		return FALSE;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
User Interfaces Design
\end_layout

\begin_layout Standard
In this section we include some mockups of both the mobile application and
 the control room.
 This mockups are styleless and does not refer to any specific platform:
 the purpose of this section is to provide details about the structural
 elements of the user interface but not their style.
\end_layout

\begin_layout Subsection
PowerEnJoy Mobile Application
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/MobileMockups_0.png
	display false
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PowerEnJoy Mobile Application mockup 1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/MobileMockups_1.png
	display false
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PowerEnJoy Mobile Application mockup 2
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/MobileMockups_2.png
	display false
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PowerEnJoy Mobile Application mockup 3
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/MobileMockups_3.png
	display false
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PowerEnJoy Mobile Application mockup 4
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/MobileMockups_4.png
	display false
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
PowerEnJoy Mobile Application mockup 5
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
PowerEnJoy Control Room
\end_layout

\begin_layout Section
Requirements Traceability
\end_layout

\begin_layout Standard
The aim of this document is to optimally design the requirements and goals
 shown in the RASD document.
\end_layout

\begin_layout Standard
Here we logically match them with feature explained in this Design Document.
\end_layout

\begin_layout Subsection
Functional requirements
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="37" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="left" valignment="top" width="20text%">
<column alignment="left" valignment="top" width="80text%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Component (DD)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Functional requirements (RASD document, section 2.2.1)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Users can register.
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Users can log-in.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logged-in users can edit their account information and pay- ment method.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Users can see available vehicles on a map.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Users can search for available vehicles in a specic area using their GPS
 position or inserting an address.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Users can see specic vehicle information (i.e.
 vehicle model, battery percentage, estimated kilometers of autonomy).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reservations Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logged-in users can make a vehicle reservation.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reservations Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logged-in users can cancel an existing vehicle reservation.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rentals Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logged-in users can unlock a vehicle they have reserved when they are nearby.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Reservations Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logged-in users can not have a reservation and a rental at the same time.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
External - Google Maps
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logged-in users can be guided by a navigator to their reserved vehicle.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Support Requests Handler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Logged-in users can send a support request.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can log-in.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can see on a map the position of all the vehicles together with
 their information.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can see users' account information.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can disable or enable a user's account.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can see user's last activity.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can see users' support requests.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can change the status of a user's support request into OPEN;HANDLING
 or CLOSED.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can see system notifications.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can reply to a user's support request.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can change the status of a system notication in OPEN; HANDLING,
 CLOSED or CRYTICAL.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can change the status of a vehicle into AVAILABLE or NOT AVAILABLE.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operator Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operators can charge users for driving fines.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vehicle Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The component can handle rent events sent from vehicles (i.e.
 RENT STARTED, RENT TERMINATED).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rentals Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The component can send commands to vehicles (e.g.
 UNLOCK DOORS).
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Payment Handler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The component can charge users on their payment method applying company
 pricing policies.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Payment Handler
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The component can handle payment failures.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The component can access and manage the company database.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Email sender
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The system can send communications to users via email on their email address.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SMS sender
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The system can send communications to users via SMS on their mobile phone
 number.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Push notification sender
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The system can send communications to users via push notifications on their
 smartphone.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CronTask Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The system can generate monthly invoices and sent them to the users on their
 email address.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vehicle Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The system can detect when a vehicle reservation expires.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vehicle Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The system can mark a vehicle as NOT AVAILABLE when its battery level is
 less than 20% and it's not rented by any user.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vehicle Manager
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The system can mark a vehicle as AVAILABLE when its status is NOT AVAILABLE
 and its battery level is higher than 20%.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
RASD updates
\end_layout

\begin_layout Standard
During this production, we apply some refinement to the RASD.
\end_layout

\begin_layout Standard
[NB: ricordarsi di cavare quella roba dal rasd e segnare versione 1.1 del
 rasd]
\end_layout

\begin_layout Section
Effort spent
\end_layout

\begin_layout Subsection
Tools used
\end_layout

\begin_layout Standard
copiamo dal rasd no? più moqups.com ?
\end_layout

\begin_layout Subsection
Working hours tracking
\end_layout

\begin_layout Section
References
\end_layout

\begin_layout Standard
NB: ricordarsi menzionare Tanca
\end_layout

\end_body
\end_document
